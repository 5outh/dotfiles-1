execute pathogen#infect()

set nocompatible

syntax on

colorscheme gruvbox
set background=dark
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE
highlight Conceal ctermbg=NONE

let mapleader="\<space>"

map <leader>co :colorscheme 

filetype plugin indent on

" Better search
set incsearch
set hlsearch
set smartcase
set ignorecase

" Filename even with one window:
set laststatus=2

" Enough of this!
command W w
command Q q

nnoremap <Leader>w :w<CR>
nnoremap <Leader>wq :wq<CR>

" Selecta Ignore
let SelectaIgnore = ['dist/', 'bower_components/', 'output/', '.git/', '.node_modules/', '.cabal-sandbox', '.stack-work']

" Line numbers
set number
set relativenumber
set numberwidth=2
highlight LineNr term=bold cterm=none ctermfg=DarkGrey ctermbg=NONE
highlight CursorLineNr term=bold cterm=none ctermfg=DarkGreen ctermbg=NONE

" Default indentation: 
set autoindent
set smartindent
set softtabstop=4
set shiftwidth=4
set expandtab

" Persistent Undo
set undofile
set undodir=~/.vim/undodir

" Syntastic settings:
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
let g:syntastic_haskell_checkers=['hdevtools']
let g:syntastic_haskell_hdevtools_args = '-g-isrc -g-Wall -g-fwarn-typed-holes -g-XPartialTypeSignatures'

" hdevtools
let g:hdevtools_options = '-g-isrc -g-Wall -g-fwarn-typed-hole -g-fdefer-type-errors -g-XPartialTypeSignatures'
map <Leader>l yaw :Ag! <C-r>0 <CR>
map <Leader>L yaW :Ag! <C-r>0 <CR>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 5

" cpp config
let g:syntastic_cpp_compiler_options = "-std=c++11 -Wall -Wextra -pedantic -Wformat=2"
let g:syntastic_cpp_compiler = "g++"
let g:syntastic_cpp_check_header = 1

" Shortcut to clear search highlight
nnoremap <leader><leader> :noh<CR><C-L>

" delimitMate 
let delimitMate_expand_cr = 2
let delimitMate_matchpairs = "(:),{:}"
let delimitMate_expand_space = 1

" haskell conceal
let g:haskell_conceal_wide = 1

" markdown languages
let g:markdown_fenced_languages = ['haskell', 'javascript', 'ruby', 'c', 'cpp']

" Find all files in all non-dot directories starting in the working directory.
" Fuzzy select one of those. Open the selected file with :e.
nnoremap <leader>e :SelectaFile<cr>
nnoremap <leader>v :SelectaVsplit<cr>
nnoremap <leader>s :SelectaSplit<cr>

" insearch.vim
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Open gdiff in vertical windows
set diffopt+=vertical

" Noop arrows
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

set scrolloff=5

" Send a command to a fifo named .test_runner
let g:myTestRunnerCommand = ''
function MyTestRunner()
    call system( 'echo "'. g:myTestRunnerCommand . '" > .test_runner' )
endfunction

nnoremap <Leader>lp :call MyTestRunner()<CR>

set exrc
